name: Deploy Lambda

on:
  push:
    paths:
      - 'Flask_backend/aws_lambda/**'

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      REPOSITORY_NAME: aws-lambda
      REGION: ap-northeast-2
      ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
      MODEL_0: ${{ secrets.MODEL_0 }}
      MODEL_1: ${{ secrets.MODEL_1 }}
      MODEL_2: ${{ secrets.MODEL_2 }}
      MODEL_3: ${{ secrets.MODEL_3 }}
      LAMBDA_ROLE: ${{ secrets.LAMBDA_ROLE}}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Amazon ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      run: docker build -t ${{ env.REPOSITORY_NAME }} Flask_backend/aws_lambda

    - name: Get image digest
      id: get-image-digest
      run: |
        IMAGE_DIGESTS=$(aws ecr list-images --repository-name ${{ env.REPOSITORY_NAME }} --region ${{ env.REGION }} --query "imageIds[*].imageDigest" --output text)
        echo "IMAGE_DIGESTS=$IMAGE_DIGESTS" >> $GITHUB_ENV

    - name: Delete old images from ECR
      if: env.IMAGE_DIGESTS != ''
      run: |
        for DIGEST in $IMAGE_DIGESTS; do
          aws ecr batch-delete-image --repository-name ${{ env.REPOSITORY_NAME }} --region ${{ env.REGION }} --image-ids imageDigest=$DIGEST
        done

    - name: Delete ECR repository
      run: aws ecr delete-repository --repository-name ${{ env.REPOSITORY_NAME }} --region ${{ env.REGION }} --force || true

    - name: Create ECR repository
      run: aws ecr create-repository --repository-name ${{ env.REPOSITORY_NAME }} --image-scanning-configuration scanOnPush=true --region ${{ env.REGION }}

    - name: Tag Docker image
      run: docker tag ${{ env.REPOSITORY_NAME }}:latest ${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}:latest

    - name: Push Docker image to ECR
      run: docker push ${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}:latest

    - name: Delete old Lambda function
      run: aws lambda delete-function --function-name perst1 || true

    - name: Create new Lambda function
      run: |
        aws lambda create-function --function-name perst1 --package-type Image \
          --code ImageUri=${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}:latest \
          --role ${{ env.LAMBDA_ROLE }} \
          --environment "Variables={bucket_name=${{ env.BUCKET_NAME }},model_0=${{ env.MODEL_0 }},model_1=${{ env.MODEL_1 }},model_2=${{ env.MODEL_2 }},model_3=${{ env.MODEL_3 }}}" \
          --memory-size 6020 --timeout 600 --ephemeral-storage Size=5000

  update_integration:
    needs: deploy
    runs-on: ubuntu-latest

    env:
      REGION: ap-northeast-2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Get Route ID
        id: get_route_id
        run: |
          # Get the Route ID from AWS API Gateway
          ROUTE_ID=$(aws apigatewayv2 get-routes --api-id ${{ secrets.API_ID }} --query "Items[?RouteKey=='${{ secrets.ROUTE_KEY }}'].RouteId" --output text)
          # Check if the Route ID is found
          if [ -z "$ROUTE_ID" ]; then
            echo "Route not found."
            exit 1
          else
            echo "Route found."
            echo "::add-mask::$ROUTE_ID"
            echo "ROUTE_ID=$ROUTE_ID" >> $GITHUB_ENV
          fi


      - name: Get existing integration ID
        run: |
          INTEGRATION_ID=$(aws apigatewayv2 get-integrations --api-id ${{  secrets.API_ID  }} --query "Items[?IntegrationType=='AWS_PROXY'].IntegrationId" --output text)
          if [ -z "$INTEGRATION_ID" ]; then
            echo "No existing integration found. Creating a new integration."
          else
            echo "Removing existing integration from route."
            aws apigatewayv2 delete-route --api-id ${{  secrets.API_ID  }} --route-id ${{ env.ROUTE_ID }}
            
            echo "Deleting existing integration."
            aws apigatewayv2 delete-integration --api-id ${{  secrets.API_ID  }} --integration-id $INTEGRATION_ID
            fi

      - name: Create new integration
        id: get-integration
        run: |
          NEW_INTEGRATION_ID=$(aws apigatewayv2 create-integration --api-id ${{  secrets.API_ID  }} --integration-type AWS_PROXY --integration-uri ${{  secrets.LAMBDA_ARN  }} --payload-format-version 2.0 --query "IntegrationId" --output text)
          echo "::add-mask::$INTEGRATION_ID"
          echo "INTEGRATION_ID=$NEW_INTEGRATION_ID" >> $GITHUB_ENV
          
      - name: Set new integration to route
        run: |
          aws apigatewayv2 create-route --api-id ${{  secrets.API_ID  }} --route-key "${{  secrets.ROUTE_KEY  }}" --target integrations/${{ env.INTEGRATION_ID }}

      - name: Add permission to Lambda function
        run: |
          aws lambda add-permission --function-name perst1 --statement-id $RANDOM --action lambda:InvokeFunction --principal apigateway.amazonaws.com --source-arn "${{  secrets.SOURCE_ARN  }}"

      - name: Process completed
        run: echo "Process completed."

  store_lambda_url:
    needs: update_integration
    runs-on: ubuntu-latest

    steps:
      - name: Install dependencies
        run: |
          pip install boto3 mysql-connector-python
      
      - name: Get Lambda URL
        id: get_lambda_url
        run: |
          URL=$(aws lambda create-function-url-config --function-name perst1 --auth-type NONE --query FunctionUrl --output text)
          echo "::add-mask::$URL"
          echo "URL=$URL" >> $GITHUB_ENV
          
      - name: ADD_permission
        id: get_lambda_url
        run: |
          aws lambda add-permission --function-name perst1 --statement-id FunctionURLAllowPublicAccess --action lambda:InvokeFunctionUrl --principal * --function-url-auth-type NONE

      - name: Store URL in Parameter Store
        run: |
          aws ssm put-parameter --name "/lambda/url" --value "${{ env.URL }}" --type String
          
      - name: Execute Python script
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Run Python script
        run: |
          python script.py